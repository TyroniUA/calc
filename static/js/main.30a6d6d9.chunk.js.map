{"version":3,"sources":["Calculator.js","App.js","serviceWorker.js","index.js"],"names":["endsWithOperator","endsWithNegativeSign","Calculator","props","handleCLick","event","state","input","setState","formula","target","value","console","log","handleOperator","test","previousValue","addDecimal","indexOf","clear","evaluated","equals","result","eval","toString","bind","this","id","ref","createRef","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mpCACMA,iBAAmB,SACnBC,qBAAuB,UAEvBC,W,2BACF,oBAAYC,OAAQ,IAAD,+JACf,8SAAMA,QADS,MAWnBC,YAAc,SAACC,GACc,MAArB,MAAKC,MAAMC,MAEX,MAAKC,SAAS,CACVC,QAAS,GAAKJ,EAAMK,OAAOC,MAC3BJ,MAAO,GAAKF,EAAMK,OAAOC,SAM7BC,QAAQC,IAAI,8BACZ,MAAKL,SAAS,CACVC,QAAS,MAAKH,MAAMG,QAAUJ,EAAMK,OAAOC,MAC3CJ,MAAO,MAAKD,MAAMC,MAAQF,EAAMK,OAAOC,UAzBhC,MA+BnBG,eAAgB,SAACT,GAERL,iBAAiBe,KAAK,MAAKT,MAAMG,SAU5BR,qBAAqBc,KAAK,MAAKT,MAAMG,SAQhB,MAAtBJ,EAAMK,OAAOC,QAClBC,QAAQC,IAAI,2BACZ,MAAKL,SAAS,CACVC,QAAS,MAAKH,MAAMU,cAAgBX,EAAMK,OAAOC,MACjDJ,MAAOF,EAAMK,OAAOC,UAXxBC,QAAQC,IAAI,uCACZ,MAAKL,SAAS,CACVC,SAAUR,qBAAqBc,KAAK,MAAKT,MAAMG,QAAUJ,EAAMK,OAAOC,OAAS,MAAKL,MAAMG,QAAU,MAAKH,MAAMU,eAAiBX,EAAMK,OAAOC,UAZjJC,QAAQC,IAAI,cACZ,MAAKL,SAAS,CACVQ,cAAe,MAAKV,MAAMG,QAC1BA,QAAS,MAAKH,MAAMG,QAAUJ,EAAMK,OAAOC,MAC3CJ,MAAOF,EAAMK,OAAOC,UAtCb,MA6DnBM,WAAa,SAACZ,IAG6B,IAAnC,MAAKC,MAAMC,MAAMW,QAAQ,MAC3B,MAAKV,SAAS,CACZC,QAAS,MAAKH,MAAMG,QAAUJ,EAAMK,OAAOC,MAC3CJ,MAAO,MAAKD,MAAMC,MAAQF,EAAMK,OAAOC,SAnE5B,MAsEnBQ,MAAQ,WACJ,MAAKX,SAAS,CACVD,MAAO,IACPE,QAAS,GACTO,cAAe,KAIfJ,QAAQC,IAAI,MAAKP,MAAMc,YA9EZ,MAiFnBC,OAAS,WAGL,IAAIC,OAASC,KAAK,MAAKjB,MAAMG,QAAQe,YAItC,MAAKhB,SAAS,CAEVC,QAASa,OACTf,MAAOe,OACPN,cAAeM,UA1FlB,MAAKhB,MAAQ,CACTG,QAAQ,GACRF,MAAO,IACPS,cAAe,IAEnB,MAAKZ,YAAc,MAAKA,YAAYqB,KAAjB,gJAPJ,M,wUAmGf,OADAb,QAAQC,IAAIa,KAAKpB,MAAMG,SAEnB,sEAAK,6FACL,kEAAKkB,GAAG,cACJ,kEAAKA,GAAG,WAAWD,KAAKpB,MAAMG,SAC9B,kEAAKkB,GAAG,WAAWD,KAAKpB,MAAMC,OAE9B,kEAAKoB,GAAG,OACJ,qEAAQA,GAAG,QAAQC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQM,MAAM,IAAImB,QAASJ,KAAKtB,aAA3E,KACA,qEAAQuB,GAAG,QAAQC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQM,MAAM,IAAImB,QAASJ,KAAKtB,aAA3E,KACA,qEAAQuB,GAAG,OAAOC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQM,MAAM,IAAImB,QAASJ,KAAKtB,aAA1E,KACA,qEAAQuB,GAAG,SAASC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQyB,QAASJ,KAAKZ,eAAgBH,MAAM,KAAxF,MAEJ,kEAAKgB,GAAG,OACJ,qEAAQA,GAAG,OAAOC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQM,MAAM,IAAImB,QAASJ,KAAKtB,aAA1E,KACA,qEAAQuB,GAAG,OAAOC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQM,MAAM,IAAImB,QAASJ,KAAKtB,aAA1E,KACA,qEAAQuB,GAAG,MAAMC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQM,MAAM,IAAImB,QAASJ,KAAKtB,aAAzE,KACA,qEAAQuB,GAAG,WAAWC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQyB,QAASJ,KAAKZ,eAAgBH,MAAM,KAA1F,MAEJ,kEAAKgB,GAAG,OAAO,qEAAQA,GAAG,MAAMC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQM,MAAM,IAAImB,QAASJ,KAAKtB,aAAzE,KACX,qEAAQuB,GAAG,MAAMC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQM,MAAM,IAAImB,QAASJ,KAAKtB,aAAzE,KACA,qEAAQuB,GAAG,QAAQC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQM,MAAM,IAAImB,QAASJ,KAAKtB,aAA3E,KACA,qEAAQuB,GAAG,MAAMC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQyB,QAASJ,KAAKZ,eAAgBH,MAAM,KAArF,MAEJ,kEAAKgB,GAAG,OACJ,qEAAQA,GAAG,UAAUC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQyB,QAASJ,KAAKT,WAAYN,MAAM,KAArF,KACA,qEAAQgB,GAAG,OAAOC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQM,MAAM,IAAImB,QAASJ,KAAKtB,aAA1E,KACA,qEAAQuB,GAAG,QAAQC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQyB,QAASJ,KAAKP,MAAOR,MAAM,MAA9E,MACA,qEAAQgB,GAAG,WAAWC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQyB,QAASJ,KAAKZ,eAAgBH,MAAM,KAA1F,MAEA,qEAAQgB,GAAG,SAASC,IAAK,SAAAvB,GAAK,OAAIwB,qDAAUxB,IAAQyB,QAASJ,KAAKL,OAAQV,MAAM,KAAhF,W,YAjIKoB,6CAAMC,WAwIhB9B,kC,2KChIA+B,MARf,WACE,OACE,yBAAKC,UAAU,OACd,kBAAChC,EAAA,EAAD,QCKeiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.30a6d6d9.chunk.js","sourcesContent":["import React, { createRef } from 'react'\r\nconst endsWithOperator = /[*+-]$/;\r\nconst endsWithNegativeSign = /[*/+]-$/;\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            formula:'',\r\n            input: '0',\r\n            previousValue: '',\r\n        }\r\n        this.handleCLick = this.handleCLick.bind(this);\r\n    }\r\n\r\n\r\n    handleCLick = (event) => {\r\n        if (this.state.input === '0') {\r\n            //console.log('zero' + this.state.input)\r\n            this.setState({\r\n                formula: '' + event.target.value,\r\n                input: '' + event.target.value\r\n            })\r\n\r\n        }\r\n        \r\n        else {\r\n            console.log('HandleCLick else statement')\r\n            this.setState({\r\n                formula: this.state.formula + event.target.value,\r\n                input: this.state.input + event.target.value\r\n            })\r\n        }\r\n    }\r\n\r\n    // handle operators + - / *\r\n    handleOperator =(event)=> {\r\n        //does it ends with operator\r\n        if (!endsWithOperator.test(this.state.formula)) {\r\n            console.log('Im testing')\r\n            this.setState({\r\n                previousValue: this.state.formula,\r\n                formula: this.state.formula + event.target.value,\r\n                input: event.target.value\r\n            })\r\n        }\r\n        \r\n        // does it ends with negative sign? \r\n        else if (!endsWithNegativeSign.test(this.state.formula)) {\r\n            console.log('HandleOperator endsWithNegativeSign')\r\n            this.setState({\r\n                formula: (endsWithNegativeSign.test(this.state.formula + event.target.value) ? this.state.formula : this.state.previousValue) + event.target.value,\r\n                })\r\n        }\r\n        \r\n        // if input is not a minus => put it\r\n        else if (event.target.value !=='-') {\r\n            console.log('it also doing something')\r\n            this.setState({\r\n                formula: this.state.previousValue + event.target.value,\r\n                input: event.target.value\r\n            })\r\n\r\n        }\r\n    }\r\n    \r\n    addDecimal = (event) => {\r\n        // only add decimal if there is no current decimal point present in the input area\r\n        \r\n        if (this.state.input.indexOf('.') === -1) {\r\n          this.setState({ \r\n            formula: this.state.formula + event.target.value,  \r\n            input: this.state.input + event.target.value });\r\n        }\r\n      };\r\n    clear = () => {\r\n        this.setState({\r\n            input: '0',\r\n            formula: '',\r\n            previousValue: '',\r\n            \r\n        }\r\n        )\r\n            console.log(this.state.evaluated)\r\n    }\r\n\r\n    equals = () => {\r\n       \r\n        // the code that works without trying to solve Problem 13:\r\n        let result = eval(this.state.formula.toString())\r\n        \r\n\r\n\r\n       this.setState({\r\n           /*formula: this.state.formula + ' = ' + eval(this.state.formula.toString()),*/\r\n           formula: result,\r\n           input: result,\r\n           previousValue: result,\r\n        }\r\n       )\r\n       \r\n    }\r\n    render() {\r\n        console.log(this.state.formula);\r\n        return (\r\n            <div><h1>Hi, I'm a calculator</h1>\r\n            <div id='calculator'>\r\n                <div id='formula'>{this.state.formula}</div>\r\n                <div id='display'>{this.state.input}</div>\r\n                {/*console.log(this.state.previousValue, this.state.input)*/}\r\n                <div id='row' >\r\n                    <button id='seven' ref={event => createRef(event)} value='7' onClick={this.handleCLick}>7</button>\r\n                    <button id='eight' ref={event => createRef(event)} value='8' onClick={this.handleCLick}>8</button>\r\n                    <button id='nine' ref={event => createRef(event)} value='9' onClick={this.handleCLick}>9</button>\r\n                    <button id='divide' ref={event => createRef(event)} onClick={this.handleOperator} value='/'>/</button>\r\n                </div>\r\n                <div id='row' >\r\n                    <button id='four' ref={event => createRef(event)} value='4' onClick={this.handleCLick}>4</button>\r\n                    <button id='five' ref={event => createRef(event)} value='5' onClick={this.handleCLick}>5</button>\r\n                    <button id='six' ref={event => createRef(event)} value='6' onClick={this.handleCLick}>6</button>\r\n                    <button id='multiply' ref={event => createRef(event)} onClick={this.handleOperator} value='*'>x</button>\r\n                </div>\r\n                <div id='row' ><button id='one' ref={event => createRef(event)} value='1' onClick={this.handleCLick}>1</button>\r\n                    <button id='two' ref={event => createRef(event)} value='2' onClick={this.handleCLick}>2</button>\r\n                    <button id='three' ref={event => createRef(event)} value='3' onClick={this.handleCLick}>3</button>\r\n                    <button id='add' ref={event => createRef(event)} onClick={this.handleOperator} value='+'>+</button>\r\n                </div>\r\n                <div id='row' >\r\n                    <button id='decimal' ref={event => createRef(event)} onClick={this.addDecimal} value='.'>.</button>\r\n                    <button id='zero' ref={event => createRef(event)} value='0' onClick={this.handleCLick}>0</button>\r\n                    <button id='clear' ref={event => createRef(event)} onClick={this.clear} value='AC' >AC</button>\r\n                    <button id='subtract' ref={event => createRef(event)} onClick={this.handleOperator} value='-'>-</button>\r\n                    </div>\r\n                    <button id='equals' ref={event => createRef(event)} onClick={this.equals} value='='>=</button>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator","import React from 'react';\nimport './App.css';\nimport Calculator from './Calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}